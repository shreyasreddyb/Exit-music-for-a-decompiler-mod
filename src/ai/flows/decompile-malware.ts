'use server';

/**
 * @fileOverview Decompiles obfuscated malware code using Gemini API.
 *
 * - decompileMalware - A function that handles the malware decompilation process.
 * - DecompileMalwareInput - The input type for the decompileMalware function.
 * - DecompileMalwareOutput - The return type for the decompileMalware function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const DecompileMalwareInputSchema = z.object({
  obfuscatedCode: z
    .string()
    .describe('The obfuscated malware code to decompile.'),
});
export type DecompileMalwareInput = z.infer<typeof DecompileMalwareInputSchema>;

const DecompileMalwareOutputSchema = z.object({
  decompiledCode: z
    .string()
    .describe('The decompiled, human-readable malware code.'),
  analysisReport: z
    .string()
    .describe('A report detailing the analysis of the decompiled code.'),
  potentialThreats: z
    .string()
    .describe('Identified potential threats and vulnerabilities.'),
});
export type DecompileMalwareOutput = z.infer<typeof DecompileMalwareOutputSchema>;

export async function decompileMalware(input: DecompileMalwareInput): Promise<DecompileMalwareOutput> {
  return decompileMalwareFlow(input);
}

const prompt = ai.definePrompt({
  name: 'decompileMalwarePrompt',
  input: {schema: DecompileMalwareInputSchema},
  output: {schema: DecompileMalwareOutputSchema},
  prompt: `You are an expert in reverse engineering and malware analysis.
  Your task is to decompile the given obfuscated malware code and provide a detailed analysis.

  Decompile the following obfuscated code:
  {{obfuscatedCode}}

  Provide the decompiled code, an analysis report, and a list of potential threats.
  Format the output as a JSON object with 'decompiledCode', 'analysisReport', and 'potentialThreats' fields.`,
});

const decompileMalwareFlow = ai.defineFlow(
  {
    name: 'decompileMalwareFlow',
    inputSchema: DecompileMalwareInputSchema,
    outputSchema: DecompileMalwareOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
